apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: namespace-as-a-service
  title: Namespace as a service
  description: Onboarding: Create your project Namespace for your container workloads
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Project Informations
      required:
        - name
        - serviceid
        - matricule
      properties:
        name:
          title: Name
          type: string
          description: Name of the namespace
          ui:autofocus: true
          ui:options:
            rows: 5
        serviceid:
          title: ServiceId
          type: string
          description: project serviceId 
          ui:autofocus: true
          ui:options:
            rows: 5
        matricule:
          title: Matricule 
          type: string
          description: Matricule of the namespace owner
          ui:autofocus: true
          ui:options:
            rows: 6
            
    - title: Choose your environement
      required:
        - environment
      properties:
        environment:
        title: Volume Type
        type: string
        description: Choose your environnement
        default: dev
        enum:
          - dev
          - uat
          - ppd
          - prd
        enumNames:
          - 'Developement'
          - 'User Acceptance Testing'
          - 'Pre production'
          - 'Production'
        

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.environment }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
